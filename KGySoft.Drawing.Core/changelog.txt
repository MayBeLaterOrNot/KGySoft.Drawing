Legend:
! Breaking change
* Compatible change
- Bugfix
+ New feature
===============================================================================

~~~~~~~~~
* v7.2.0:
~~~~~~~~~

* KGySoft.Drawing.Imaging namespace
===================================
+ The Color64 struct has been made public
+ The ColorF struct has been made public
+ New PColor32 struct
+ New PColor64 struct
+ New PColorF struct
* ColorExtensions class:
  + New ToColor/ToColor32/ToColor64/ToColorF/ToPColor32/ToPColor64/ToPColorF methods
  + New ToPremultiplied/ToStraight methods
  + New GetBrightness overloads
  + New GetBrightnessF methods
  + New Blend overloads
  + New TolerantEquals overloads
  * Improving performance (Blend, GetBrightness and some internal conversion operations)
* ColorSpaceHelper class:
  + Adding new ToFloat overload from UInt16
  + Adding new ToUInt16 methods
  + Adding new SrgbToLinear overload from UInt16
  + Adding new LinearToSrgb16Bit method
  + Adding new ToByte overload from UInt16
  - Fixing float-float version of LinearToSrgb for some out-of-bounds values
* Palette class:
  * Grayscale256 method: improving grayscale mapping when working in the linear color space
  + Grayscale16/Grayscale4 methods: special linear color space handling even if directMapping is true
* BitmapDataFactory class:
  * Improving grayscale conversion for the known grayscale pixel format when working in the linear color space
- BitmapDataExtensions class:
  - Some Clone overloads did not preserve original back color and alpha threshold.


~~~~~~~~~
! v7.1.0:
~~~~~~~~~

! KGySoft.Drawing.Imaging namespace
===================================
! IBitmapData interface:
  ! New WorkingColorSpace property. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1
    where this property has a default implementation and returns WorkingColorSpace.Default.
! IQuantizingSession interface:
  ! New WorkingColorSpace property. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard
    2.1 where this property has a default implementation and returns WorkingColorSpace.Default.
! Palette class:
  ! The constructors with Func<Color32, int> parameters are now obsolete. These overloads have no default parameters
    anymore so if you didn't use the old customGetNearestColorIndex parameter, then automatically the new overloads
    are called if you recompile your code.
  + New constructor overloads with IEnumerable<Color32> parameter instead of an array.
  + New constructor and factory method overloads with workingColorSpace parameters.
  + New WorkingColorSpace property.
  - The constructor with Color32[] parameter just used to store the specified array. This made possible to corrupt
    the palette if the array elements were changed after creating the palette. From now on the elements are copied
    into a new storage.
! RandomNoiseDitherer:
  ! New constructor overload. Marked as a breaking change because if an integer constant literal was passed to the
    strength parameter the compiler may say the call is ambiguous between float and AutoStrengthMode enum.
! InterleavedGradientNoiseDitherer:
  ! New constructor overload. Marked as a breaking change because if an integer constant literal was passed to the
    strength parameter the compiler may say the call is ambiguous between float and AutoStrengthMode enum.
+ New IPalette interface
+ New WorkingColorSpace enumeration
+ New AutoStrengthMode enumeration
+ BitmapDataExtensions class:
  + New Clone/BeginClone/CloneAsync overloads with workingColorSpace parameter.
  + New GetPreferredColorSpace method.
+ BitmapDataFactory class:
  + New CreateBitmapData overloads with workingColorSpace parameter.
+ ColorExtensions class:
  + New Blend overload
+ New ColorSpaceHelper class
+ PredefinedColorsQuantizer class:
  + New WorkingColorSpace property.
  + New ConfigureColorSpace method
+ OptimizedPaletteQuantizer class:
  + New WorkingColorSpace property.
  + New ConfigureColorSpace method
+ PixelFormatInfo struct:
  + New LinearGamma property.


~~~~~~~~~
! v7.0.0:
~~~~~~~~~

NOTE: This is the first version of KGySoft.Drawing.Core but as it was extracted from the KGySoft.Drawing library the
changes are compared to KGySoft.Drawing v6.3.2. Breaking changes can be interpreted as an upgrade from that library.

! Assembly changes:
===================
! System.Drawing.Common package is no longer referenced (.NET Core/Standard 2.0 and above). To use APIs that depend
  on System.Drawing.Common (eg. Image, Bitmap, Icon, Metafile, etc.) reference the KGySoft.Drawing package.

! KGySoft.Drawing namespace
===========================
! The IDrawingProgress interface has been removed. It is replaced by KGySoft.Threading.IAsyncProgress from the
  KGySoft.CoreLibraries assembly.
! The DrawingProgress struct has been removed. It is replaced by KGySoft.Threading.AsyncProgress<T> from the
  KGySoft.CoreLibraries assembly.
! The AsyncConfigBase, AsyncConfig and TaskConfig classes and the IAsyncContext interface have been replaced by the
  identically named types from the KGySoft.Threading namespace in the KGySoft.CoreLibraries assembly.

! KGySoft.Drawing.Imaging namespace
===================================
! Every method with a System.Drawing.Imaging.PixelFormat enum parameter have been changed to use the
  KGySoft.Drawing.Imaging.KnownPixelFormat enum type instead. The field names of both enums are the same.
! IBitmapData interface:
  ! The PixelFormat property from now on returns a PixelFormatInfo struct rather than an enum value of the
    System.Drawing.Imaging.PixelFormat type. It now supports custom formats better and you still can convert it
    to a known format if needed.
  ! New Size property. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this property has a default implementation using the Width and Height properties.
! IBitmapDataRow interface:
  ! The MoveNextRow method has been moved to the new IBitmapDataRowMovable interface
! ICustomBitmapDataRow interface
  ! New Index property
! IReadableBitmapData interface
  ! FirstRow returns an IReadableBitmapDataRowMovable instead of IReadableBitmapDataRow
  ! New GetMovableRow method. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this method has a default implementation.
  ! New GetColor32 method. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this method has a default implementation.
! IWritableBitmapData interface
  ! FirstRow returns an IWritableBitmapDataRowMovable instead of IWritableBitmapDataRow
  ! New GetMovableRow method. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this method has a default implementation.
  ! New SetColor32 method. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this method has a default implementation.
! IReadWriteBitmapData interface
  ! FirstRow returns an IReadWriteBitmapDataRowMovable instead of IReadWriteBitmapDataRow
  ! New GetMovableRow method. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this method has a default implementation.
! BitmapDataExtensions class:
  ! The ToBitmap/BeginToBitmap/EndToBitmap/ToBitmapAsync methods are now in the ReadableBitmapDataExtensions class
    of the KGySoft.Drawing package. When recompiling C# sources, this is not a breaking change if you use the
    KGySoft.Drawing package and use these methods as extensions (without the class name).
  + New Clone/CopyTo/DrawInto/Clear/TransformColors/Quantize/Dither overloads with IAsyncContext parameter.
  + New Resize/BeginResize/EndResize/ResizeAsync methods
! IQuantizingSession interface:
  ! New IsGrayscale property. Not a breaking change when targeting at least .NET Core 3.0/.NET Standard 2.1 where
    this property returns false if not implemented.
+ ColorExtensions class:
  + New Color32 extension method.
  * Blend method: improving performance when blending with opaque background color.
+ New KnownPixelFormat enum. The names of the actual formats are compatible with System.Drawing.Imaging.PixelFormat
  but some of them have different underlying values. Use the ToPixelFormat extension from KGySoft.Drawing to convert
  it to a System.Drawing.Imaging.PixelFormat.
+ New IBitmapDataRowMovable, IReadableBitmapDataRowMovable, IWritableBitmapDataRowMovable and
  IReadWriteBitmapDataRowMovable interfaces
+ New KnownPixelFormatExtensions class
+ Palette class:
  + New public constructor to create a new Palette from an existing one with different back color and alpha
    threshold values.
  + The IsGrayscale and HasAlpha properties have been made public.
+ PixelFormatInfo struct:
  + New public constructor from KnownPixelFormat
  + New IsCustomFormat property
  + Implementing IEquatable<PixelFormatInfo>
  + Equality and inequality operators are overloaded
  + New ToKnownPixelFormat method
+ New QuantizerExtensions class to initialize a quantizing session asynchronously (.NET Framework 4.0 and above)
+ New DithererExtensions class to initialize a dithering session asynchronously (.NET Framework 4.0 and above)
+ Color32 struct:
  + Making Color32 serializable
  + New implicit conversions to and from Color.
+ PredefinedColorsQuantizer class:
  + New public BackColor, AlphaThreshold and Palette properties.
+ OptimizedPaletteQuantizer class:
  + New BackColor, AlphaThreshold and MaxColors properties.

NOTE: See the history of older versions at the following link:
https://github.com/koszeggy/KGySoft.Drawing/blob/master/Specific/GdiPlus/KGySoft.Drawing/changelog.txt